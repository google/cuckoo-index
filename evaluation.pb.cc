// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: evaluation.proto

#include "evaluation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_evaluation_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_evaluation_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BitmapStats;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_evaluation_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EvaluationResults_TestCase;
}  // namespace protobuf_evaluation_2eproto
namespace ci {
class BitmapStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BitmapStats>
      _instance;
} _BitmapStats_default_instance_;
class EvaluationResults_TestCaseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EvaluationResults_TestCase>
      _instance;
} _EvaluationResults_TestCase_default_instance_;
class EvaluationResultsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EvaluationResults>
      _instance;
} _EvaluationResults_default_instance_;
}  // namespace ci
namespace protobuf_evaluation_2eproto {
static void InitDefaultsBitmapStats() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ci::_BitmapStats_default_instance_;
    new (ptr) ::ci::BitmapStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ci::BitmapStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BitmapStats =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBitmapStats}, {}};

static void InitDefaultsEvaluationResults_TestCase() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ci::_EvaluationResults_TestCase_default_instance_;
    new (ptr) ::ci::EvaluationResults_TestCase();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ci::EvaluationResults_TestCase::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EvaluationResults_TestCase =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEvaluationResults_TestCase}, {}};

static void InitDefaultsEvaluationResults() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ci::_EvaluationResults_default_instance_;
    new (ptr) ::ci::EvaluationResults();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ci::EvaluationResults::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_EvaluationResults =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsEvaluationResults}, {
      &protobuf_evaluation_2eproto::scc_info_BitmapStats.base,
      &protobuf_evaluation_2eproto::scc_info_EvaluationResults_TestCase.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_BitmapStats.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EvaluationResults_TestCase.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EvaluationResults.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ci::BitmapStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ci::BitmapStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ci::BitmapStats, density_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ci::BitmapStats, clustering_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ci::BitmapStats, bitpacked_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ci::BitmapStats, bitpacked_compressed_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ci::BitmapStats, roaring_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ci::BitmapStats, roaring_compressed_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ci::BitmapStats, roaring_individual_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ci::BitmapStats, roaring_individual_compressed_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ci::BitmapStats, rle_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ci::BitmapStats, rle_compressed_size_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ci::EvaluationResults_TestCase, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ci::EvaluationResults_TestCase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ci::EvaluationResults_TestCase, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ci::EvaluationResults_TestCase, num_lookups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ci::EvaluationResults_TestCase, num_false_positives_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ci::EvaluationResults_TestCase, num_true_negatives_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ci::EvaluationResults, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ci::EvaluationResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ci::EvaluationResults, index_structure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ci::EvaluationResults, num_rows_per_stripe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ci::EvaluationResults, num_stripes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ci::EvaluationResults, column_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ci::EvaluationResults, column_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ci::EvaluationResults, column_cardinality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ci::EvaluationResults, column_compressed_size_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ci::EvaluationResults, index_size_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ci::EvaluationResults, index_compressed_size_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ci::EvaluationResults, bitmap_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ci::EvaluationResults, test_cases_),
  0,
  4,
  5,
  1,
  2,
  6,
  9,
  7,
  8,
  3,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::ci::BitmapStats)},
  { 25, 34, sizeof(::ci::EvaluationResults_TestCase)},
  { 38, 54, sizeof(::ci::EvaluationResults)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ci::_BitmapStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ci::_EvaluationResults_TestCase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ci::_EvaluationResults_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "evaluation.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020evaluation.proto\022\002ci\"\240\002\n\013BitmapStats\022\017"
      "\n\007density\030\001 \001(\001\022\022\n\nclustering\030\002 \001(\001\022\026\n\016b"
      "itpacked_size\030\003 \001(\003\022!\n\031bitpacked_compres"
      "sed_size\030\004 \001(\003\022\024\n\014roaring_size\030\005 \001(\003\022\037\n\027"
      "roaring_compressed_size\030\006 \001(\003\022\037\n\027roaring"
      "_individual_size\030\007 \001(\003\022*\n\"roaring_indivi"
      "dual_compressed_size\030\010 \001(\003\022\020\n\010rle_size\030\t"
      " \001(\003\022\033\n\023rle_compressed_size\030\n \001(\003\"\314\003\n\021Ev"
      "aluationResults\022\027\n\017index_structure\030\001 \001(\t"
      "\022\033\n\023num_rows_per_stripe\030\002 \001(\003\022\023\n\013num_str"
      "ipes\030\003 \001(\003\022\023\n\013column_name\030\004 \001(\t\022\023\n\013colum"
      "n_type\030\005 \001(\t\022\032\n\022column_cardinality\030\006 \001(\003"
      "\022$\n\034column_compressed_size_bytes\030\n \001(\003\022\030"
      "\n\020index_size_bytes\030\007 \001(\003\022#\n\033index_compre"
      "ssed_size_bytes\030\t \001(\003\022%\n\014bitmap_stats\030\013 "
      "\001(\0132\017.ci.BitmapStats\0222\n\ntest_cases\030\010 \003(\013"
      "2\036.ci.EvaluationResults.TestCase\032f\n\010Test"
      "Case\022\014\n\004name\030\001 \001(\t\022\023\n\013num_lookups\030\002 \001(\003\022"
      "\033\n\023num_false_positives\030\003 \001(\003\022\032\n\022num_true"
      "_negatives\030\004 \001(\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 776);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "evaluation.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_evaluation_2eproto
namespace ci {

// ===================================================================

void BitmapStats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BitmapStats::kDensityFieldNumber;
const int BitmapStats::kClusteringFieldNumber;
const int BitmapStats::kBitpackedSizeFieldNumber;
const int BitmapStats::kBitpackedCompressedSizeFieldNumber;
const int BitmapStats::kRoaringSizeFieldNumber;
const int BitmapStats::kRoaringCompressedSizeFieldNumber;
const int BitmapStats::kRoaringIndividualSizeFieldNumber;
const int BitmapStats::kRoaringIndividualCompressedSizeFieldNumber;
const int BitmapStats::kRleSizeFieldNumber;
const int BitmapStats::kRleCompressedSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BitmapStats::BitmapStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_evaluation_2eproto::scc_info_BitmapStats.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ci.BitmapStats)
}
BitmapStats::BitmapStats(const BitmapStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&density_, &from.density_,
    static_cast<size_t>(reinterpret_cast<char*>(&rle_compressed_size_) -
    reinterpret_cast<char*>(&density_)) + sizeof(rle_compressed_size_));
  // @@protoc_insertion_point(copy_constructor:ci.BitmapStats)
}

void BitmapStats::SharedCtor() {
  ::memset(&density_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rle_compressed_size_) -
      reinterpret_cast<char*>(&density_)) + sizeof(rle_compressed_size_));
}

BitmapStats::~BitmapStats() {
  // @@protoc_insertion_point(destructor:ci.BitmapStats)
  SharedDtor();
}

void BitmapStats::SharedDtor() {
}

void BitmapStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BitmapStats::descriptor() {
  ::protobuf_evaluation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_evaluation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BitmapStats& BitmapStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_evaluation_2eproto::scc_info_BitmapStats.base);
  return *internal_default_instance();
}


void BitmapStats::Clear() {
// @@protoc_insertion_point(message_clear_start:ci.BitmapStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&density_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roaring_individual_compressed_size_) -
        reinterpret_cast<char*>(&density_)) + sizeof(roaring_individual_compressed_size_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&rle_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rle_compressed_size_) -
        reinterpret_cast<char*>(&rle_size_)) + sizeof(rle_compressed_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BitmapStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ci.BitmapStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double density = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_density();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &density_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double clustering = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_clustering();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &clustering_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bitpacked_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_bitpacked_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bitpacked_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bitpacked_compressed_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_bitpacked_compressed_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bitpacked_compressed_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 roaring_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_roaring_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roaring_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 roaring_compressed_size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_roaring_compressed_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roaring_compressed_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 roaring_individual_size = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_roaring_individual_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roaring_individual_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 roaring_individual_compressed_size = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_roaring_individual_compressed_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &roaring_individual_compressed_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 rle_size = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_rle_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rle_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 rle_compressed_size = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_rle_compressed_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rle_compressed_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ci.BitmapStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ci.BitmapStats)
  return false;
#undef DO_
}

void BitmapStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ci.BitmapStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double density = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->density(), output);
  }

  // optional double clustering = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->clustering(), output);
  }

  // optional int64 bitpacked_size = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->bitpacked_size(), output);
  }

  // optional int64 bitpacked_compressed_size = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->bitpacked_compressed_size(), output);
  }

  // optional int64 roaring_size = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->roaring_size(), output);
  }

  // optional int64 roaring_compressed_size = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->roaring_compressed_size(), output);
  }

  // optional int64 roaring_individual_size = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->roaring_individual_size(), output);
  }

  // optional int64 roaring_individual_compressed_size = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->roaring_individual_compressed_size(), output);
  }

  // optional int64 rle_size = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->rle_size(), output);
  }

  // optional int64 rle_compressed_size = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->rle_compressed_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ci.BitmapStats)
}

::google::protobuf::uint8* BitmapStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ci.BitmapStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double density = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->density(), target);
  }

  // optional double clustering = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->clustering(), target);
  }

  // optional int64 bitpacked_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->bitpacked_size(), target);
  }

  // optional int64 bitpacked_compressed_size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->bitpacked_compressed_size(), target);
  }

  // optional int64 roaring_size = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->roaring_size(), target);
  }

  // optional int64 roaring_compressed_size = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->roaring_compressed_size(), target);
  }

  // optional int64 roaring_individual_size = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->roaring_individual_size(), target);
  }

  // optional int64 roaring_individual_compressed_size = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->roaring_individual_compressed_size(), target);
  }

  // optional int64 rle_size = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->rle_size(), target);
  }

  // optional int64 rle_compressed_size = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->rle_compressed_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ci.BitmapStats)
  return target;
}

size_t BitmapStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ci.BitmapStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double density = 1;
    if (has_density()) {
      total_size += 1 + 8;
    }

    // optional double clustering = 2;
    if (has_clustering()) {
      total_size += 1 + 8;
    }

    // optional int64 bitpacked_size = 3;
    if (has_bitpacked_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bitpacked_size());
    }

    // optional int64 bitpacked_compressed_size = 4;
    if (has_bitpacked_compressed_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bitpacked_compressed_size());
    }

    // optional int64 roaring_size = 5;
    if (has_roaring_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roaring_size());
    }

    // optional int64 roaring_compressed_size = 6;
    if (has_roaring_compressed_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roaring_compressed_size());
    }

    // optional int64 roaring_individual_size = 7;
    if (has_roaring_individual_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roaring_individual_size());
    }

    // optional int64 roaring_individual_compressed_size = 8;
    if (has_roaring_individual_compressed_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->roaring_individual_compressed_size());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int64 rle_size = 9;
    if (has_rle_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rle_size());
    }

    // optional int64 rle_compressed_size = 10;
    if (has_rle_compressed_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rle_compressed_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BitmapStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ci.BitmapStats)
  GOOGLE_DCHECK_NE(&from, this);
  const BitmapStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BitmapStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ci.BitmapStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ci.BitmapStats)
    MergeFrom(*source);
  }
}

void BitmapStats::MergeFrom(const BitmapStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ci.BitmapStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      density_ = from.density_;
    }
    if (cached_has_bits & 0x00000002u) {
      clustering_ = from.clustering_;
    }
    if (cached_has_bits & 0x00000004u) {
      bitpacked_size_ = from.bitpacked_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      bitpacked_compressed_size_ = from.bitpacked_compressed_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      roaring_size_ = from.roaring_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      roaring_compressed_size_ = from.roaring_compressed_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      roaring_individual_size_ = from.roaring_individual_size_;
    }
    if (cached_has_bits & 0x00000080u) {
      roaring_individual_compressed_size_ = from.roaring_individual_compressed_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      rle_size_ = from.rle_size_;
    }
    if (cached_has_bits & 0x00000200u) {
      rle_compressed_size_ = from.rle_compressed_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BitmapStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ci.BitmapStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitmapStats::CopyFrom(const BitmapStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ci.BitmapStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitmapStats::IsInitialized() const {
  return true;
}

void BitmapStats::Swap(BitmapStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BitmapStats::InternalSwap(BitmapStats* other) {
  using std::swap;
  swap(density_, other->density_);
  swap(clustering_, other->clustering_);
  swap(bitpacked_size_, other->bitpacked_size_);
  swap(bitpacked_compressed_size_, other->bitpacked_compressed_size_);
  swap(roaring_size_, other->roaring_size_);
  swap(roaring_compressed_size_, other->roaring_compressed_size_);
  swap(roaring_individual_size_, other->roaring_individual_size_);
  swap(roaring_individual_compressed_size_, other->roaring_individual_compressed_size_);
  swap(rle_size_, other->rle_size_);
  swap(rle_compressed_size_, other->rle_compressed_size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BitmapStats::GetMetadata() const {
  protobuf_evaluation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_evaluation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EvaluationResults_TestCase::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EvaluationResults_TestCase::kNameFieldNumber;
const int EvaluationResults_TestCase::kNumLookupsFieldNumber;
const int EvaluationResults_TestCase::kNumFalsePositivesFieldNumber;
const int EvaluationResults_TestCase::kNumTrueNegativesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EvaluationResults_TestCase::EvaluationResults_TestCase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_evaluation_2eproto::scc_info_EvaluationResults_TestCase.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ci.EvaluationResults.TestCase)
}
EvaluationResults_TestCase::EvaluationResults_TestCase(const EvaluationResults_TestCase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&num_lookups_, &from.num_lookups_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_true_negatives_) -
    reinterpret_cast<char*>(&num_lookups_)) + sizeof(num_true_negatives_));
  // @@protoc_insertion_point(copy_constructor:ci.EvaluationResults.TestCase)
}

void EvaluationResults_TestCase::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_lookups_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_true_negatives_) -
      reinterpret_cast<char*>(&num_lookups_)) + sizeof(num_true_negatives_));
}

EvaluationResults_TestCase::~EvaluationResults_TestCase() {
  // @@protoc_insertion_point(destructor:ci.EvaluationResults.TestCase)
  SharedDtor();
}

void EvaluationResults_TestCase::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EvaluationResults_TestCase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EvaluationResults_TestCase::descriptor() {
  ::protobuf_evaluation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_evaluation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EvaluationResults_TestCase& EvaluationResults_TestCase::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_evaluation_2eproto::scc_info_EvaluationResults_TestCase.base);
  return *internal_default_instance();
}


void EvaluationResults_TestCase::Clear() {
// @@protoc_insertion_point(message_clear_start:ci.EvaluationResults.TestCase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&num_lookups_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_true_negatives_) -
        reinterpret_cast<char*>(&num_lookups_)) + sizeof(num_true_negatives_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EvaluationResults_TestCase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ci.EvaluationResults.TestCase)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ci.EvaluationResults.TestCase.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 num_lookups = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num_lookups();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_lookups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 num_false_positives = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_num_false_positives();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_false_positives_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 num_true_negatives = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_num_true_negatives();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_true_negatives_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ci.EvaluationResults.TestCase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ci.EvaluationResults.TestCase)
  return false;
#undef DO_
}

void EvaluationResults_TestCase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ci.EvaluationResults.TestCase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ci.EvaluationResults.TestCase.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int64 num_lookups = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->num_lookups(), output);
  }

  // optional int64 num_false_positives = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->num_false_positives(), output);
  }

  // optional int64 num_true_negatives = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->num_true_negatives(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ci.EvaluationResults.TestCase)
}

::google::protobuf::uint8* EvaluationResults_TestCase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ci.EvaluationResults.TestCase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ci.EvaluationResults.TestCase.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int64 num_lookups = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->num_lookups(), target);
  }

  // optional int64 num_false_positives = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->num_false_positives(), target);
  }

  // optional int64 num_true_negatives = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->num_true_negatives(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ci.EvaluationResults.TestCase)
  return target;
}

size_t EvaluationResults_TestCase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ci.EvaluationResults.TestCase)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 num_lookups = 2;
    if (has_num_lookups()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_lookups());
    }

    // optional int64 num_false_positives = 3;
    if (has_num_false_positives()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_false_positives());
    }

    // optional int64 num_true_negatives = 4;
    if (has_num_true_negatives()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_true_negatives());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EvaluationResults_TestCase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ci.EvaluationResults.TestCase)
  GOOGLE_DCHECK_NE(&from, this);
  const EvaluationResults_TestCase* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EvaluationResults_TestCase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ci.EvaluationResults.TestCase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ci.EvaluationResults.TestCase)
    MergeFrom(*source);
  }
}

void EvaluationResults_TestCase::MergeFrom(const EvaluationResults_TestCase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ci.EvaluationResults.TestCase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      num_lookups_ = from.num_lookups_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_false_positives_ = from.num_false_positives_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_true_negatives_ = from.num_true_negatives_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EvaluationResults_TestCase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ci.EvaluationResults.TestCase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvaluationResults_TestCase::CopyFrom(const EvaluationResults_TestCase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ci.EvaluationResults.TestCase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvaluationResults_TestCase::IsInitialized() const {
  return true;
}

void EvaluationResults_TestCase::Swap(EvaluationResults_TestCase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EvaluationResults_TestCase::InternalSwap(EvaluationResults_TestCase* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(num_lookups_, other->num_lookups_);
  swap(num_false_positives_, other->num_false_positives_);
  swap(num_true_negatives_, other->num_true_negatives_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EvaluationResults_TestCase::GetMetadata() const {
  protobuf_evaluation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_evaluation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EvaluationResults::InitAsDefaultInstance() {
  ::ci::_EvaluationResults_default_instance_._instance.get_mutable()->bitmap_stats_ = const_cast< ::ci::BitmapStats*>(
      ::ci::BitmapStats::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EvaluationResults::kIndexStructureFieldNumber;
const int EvaluationResults::kNumRowsPerStripeFieldNumber;
const int EvaluationResults::kNumStripesFieldNumber;
const int EvaluationResults::kColumnNameFieldNumber;
const int EvaluationResults::kColumnTypeFieldNumber;
const int EvaluationResults::kColumnCardinalityFieldNumber;
const int EvaluationResults::kColumnCompressedSizeBytesFieldNumber;
const int EvaluationResults::kIndexSizeBytesFieldNumber;
const int EvaluationResults::kIndexCompressedSizeBytesFieldNumber;
const int EvaluationResults::kBitmapStatsFieldNumber;
const int EvaluationResults::kTestCasesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EvaluationResults::EvaluationResults()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_evaluation_2eproto::scc_info_EvaluationResults.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ci.EvaluationResults)
}
EvaluationResults::EvaluationResults(const EvaluationResults& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      test_cases_(from.test_cases_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  index_structure_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_index_structure()) {
    index_structure_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.index_structure_);
  }
  column_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_column_name()) {
    column_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.column_name_);
  }
  column_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_column_type()) {
    column_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.column_type_);
  }
  if (from.has_bitmap_stats()) {
    bitmap_stats_ = new ::ci::BitmapStats(*from.bitmap_stats_);
  } else {
    bitmap_stats_ = NULL;
  }
  ::memcpy(&num_rows_per_stripe_, &from.num_rows_per_stripe_,
    static_cast<size_t>(reinterpret_cast<char*>(&column_compressed_size_bytes_) -
    reinterpret_cast<char*>(&num_rows_per_stripe_)) + sizeof(column_compressed_size_bytes_));
  // @@protoc_insertion_point(copy_constructor:ci.EvaluationResults)
}

void EvaluationResults::SharedCtor() {
  index_structure_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  column_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  column_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bitmap_stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&column_compressed_size_bytes_) -
      reinterpret_cast<char*>(&bitmap_stats_)) + sizeof(column_compressed_size_bytes_));
}

EvaluationResults::~EvaluationResults() {
  // @@protoc_insertion_point(destructor:ci.EvaluationResults)
  SharedDtor();
}

void EvaluationResults::SharedDtor() {
  index_structure_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  column_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  column_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bitmap_stats_;
}

void EvaluationResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EvaluationResults::descriptor() {
  ::protobuf_evaluation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_evaluation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EvaluationResults& EvaluationResults::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_evaluation_2eproto::scc_info_EvaluationResults.base);
  return *internal_default_instance();
}


void EvaluationResults::Clear() {
// @@protoc_insertion_point(message_clear_start:ci.EvaluationResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_cases_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      index_structure_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      column_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      column_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(bitmap_stats_ != NULL);
      bitmap_stats_->Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&num_rows_per_stripe_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&index_size_bytes_) -
        reinterpret_cast<char*>(&num_rows_per_stripe_)) + sizeof(index_size_bytes_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&index_compressed_size_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&column_compressed_size_bytes_) -
        reinterpret_cast<char*>(&index_compressed_size_bytes_)) + sizeof(column_compressed_size_bytes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EvaluationResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ci.EvaluationResults)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string index_structure = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_index_structure()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->index_structure().data(), static_cast<int>(this->index_structure().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ci.EvaluationResults.index_structure");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 num_rows_per_stripe = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num_rows_per_stripe();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_rows_per_stripe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 num_stripes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_num_stripes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_stripes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string column_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_column_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->column_name().data(), static_cast<int>(this->column_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ci.EvaluationResults.column_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string column_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_column_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->column_type().data(), static_cast<int>(this->column_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ci.EvaluationResults.column_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 column_cardinality = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_column_cardinality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &column_cardinality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 index_size_bytes = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_index_size_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ci.EvaluationResults.TestCase test_cases = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_test_cases()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 index_compressed_size_bytes = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_index_compressed_size_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_compressed_size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 column_compressed_size_bytes = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_column_compressed_size_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &column_compressed_size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ci.BitmapStats bitmap_stats = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bitmap_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ci.EvaluationResults)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ci.EvaluationResults)
  return false;
#undef DO_
}

void EvaluationResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ci.EvaluationResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string index_structure = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index_structure().data(), static_cast<int>(this->index_structure().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ci.EvaluationResults.index_structure");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->index_structure(), output);
  }

  // optional int64 num_rows_per_stripe = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->num_rows_per_stripe(), output);
  }

  // optional int64 num_stripes = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->num_stripes(), output);
  }

  // optional string column_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->column_name().data(), static_cast<int>(this->column_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ci.EvaluationResults.column_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->column_name(), output);
  }

  // optional string column_type = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->column_type().data(), static_cast<int>(this->column_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ci.EvaluationResults.column_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->column_type(), output);
  }

  // optional int64 column_cardinality = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->column_cardinality(), output);
  }

  // optional int64 index_size_bytes = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->index_size_bytes(), output);
  }

  // repeated .ci.EvaluationResults.TestCase test_cases = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->test_cases_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->test_cases(static_cast<int>(i)),
      output);
  }

  // optional int64 index_compressed_size_bytes = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->index_compressed_size_bytes(), output);
  }

  // optional int64 column_compressed_size_bytes = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->column_compressed_size_bytes(), output);
  }

  // optional .ci.BitmapStats bitmap_stats = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_bitmap_stats(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ci.EvaluationResults)
}

::google::protobuf::uint8* EvaluationResults::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ci.EvaluationResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string index_structure = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index_structure().data(), static_cast<int>(this->index_structure().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ci.EvaluationResults.index_structure");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->index_structure(), target);
  }

  // optional int64 num_rows_per_stripe = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->num_rows_per_stripe(), target);
  }

  // optional int64 num_stripes = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->num_stripes(), target);
  }

  // optional string column_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->column_name().data(), static_cast<int>(this->column_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ci.EvaluationResults.column_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->column_name(), target);
  }

  // optional string column_type = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->column_type().data(), static_cast<int>(this->column_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ci.EvaluationResults.column_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->column_type(), target);
  }

  // optional int64 column_cardinality = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->column_cardinality(), target);
  }

  // optional int64 index_size_bytes = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->index_size_bytes(), target);
  }

  // repeated .ci.EvaluationResults.TestCase test_cases = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->test_cases_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->test_cases(static_cast<int>(i)), deterministic, target);
  }

  // optional int64 index_compressed_size_bytes = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->index_compressed_size_bytes(), target);
  }

  // optional int64 column_compressed_size_bytes = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->column_compressed_size_bytes(), target);
  }

  // optional .ci.BitmapStats bitmap_stats = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_bitmap_stats(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ci.EvaluationResults)
  return target;
}

size_t EvaluationResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ci.EvaluationResults)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .ci.EvaluationResults.TestCase test_cases = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->test_cases_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->test_cases(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string index_structure = 1;
    if (has_index_structure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->index_structure());
    }

    // optional string column_name = 4;
    if (has_column_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->column_name());
    }

    // optional string column_type = 5;
    if (has_column_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->column_type());
    }

    // optional .ci.BitmapStats bitmap_stats = 11;
    if (has_bitmap_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bitmap_stats_);
    }

    // optional int64 num_rows_per_stripe = 2;
    if (has_num_rows_per_stripe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_rows_per_stripe());
    }

    // optional int64 num_stripes = 3;
    if (has_num_stripes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_stripes());
    }

    // optional int64 column_cardinality = 6;
    if (has_column_cardinality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->column_cardinality());
    }

    // optional int64 index_size_bytes = 7;
    if (has_index_size_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->index_size_bytes());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int64 index_compressed_size_bytes = 9;
    if (has_index_compressed_size_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->index_compressed_size_bytes());
    }

    // optional int64 column_compressed_size_bytes = 10;
    if (has_column_compressed_size_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->column_compressed_size_bytes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EvaluationResults::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ci.EvaluationResults)
  GOOGLE_DCHECK_NE(&from, this);
  const EvaluationResults* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EvaluationResults>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ci.EvaluationResults)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ci.EvaluationResults)
    MergeFrom(*source);
  }
}

void EvaluationResults::MergeFrom(const EvaluationResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ci.EvaluationResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  test_cases_.MergeFrom(from.test_cases_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_index_structure();
      index_structure_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.index_structure_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_column_name();
      column_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.column_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_column_type();
      column_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.column_type_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_bitmap_stats()->::ci::BitmapStats::MergeFrom(from.bitmap_stats());
    }
    if (cached_has_bits & 0x00000010u) {
      num_rows_per_stripe_ = from.num_rows_per_stripe_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_stripes_ = from.num_stripes_;
    }
    if (cached_has_bits & 0x00000040u) {
      column_cardinality_ = from.column_cardinality_;
    }
    if (cached_has_bits & 0x00000080u) {
      index_size_bytes_ = from.index_size_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      index_compressed_size_bytes_ = from.index_compressed_size_bytes_;
    }
    if (cached_has_bits & 0x00000200u) {
      column_compressed_size_bytes_ = from.column_compressed_size_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EvaluationResults::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ci.EvaluationResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvaluationResults::CopyFrom(const EvaluationResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ci.EvaluationResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvaluationResults::IsInitialized() const {
  return true;
}

void EvaluationResults::Swap(EvaluationResults* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EvaluationResults::InternalSwap(EvaluationResults* other) {
  using std::swap;
  CastToBase(&test_cases_)->InternalSwap(CastToBase(&other->test_cases_));
  index_structure_.Swap(&other->index_structure_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  column_name_.Swap(&other->column_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  column_type_.Swap(&other->column_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bitmap_stats_, other->bitmap_stats_);
  swap(num_rows_per_stripe_, other->num_rows_per_stripe_);
  swap(num_stripes_, other->num_stripes_);
  swap(column_cardinality_, other->column_cardinality_);
  swap(index_size_bytes_, other->index_size_bytes_);
  swap(index_compressed_size_bytes_, other->index_compressed_size_bytes_);
  swap(column_compressed_size_bytes_, other->column_compressed_size_bytes_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EvaluationResults::GetMetadata() const {
  protobuf_evaluation_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_evaluation_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ci
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ci::BitmapStats* Arena::CreateMaybeMessage< ::ci::BitmapStats >(Arena* arena) {
  return Arena::CreateInternal< ::ci::BitmapStats >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ci::EvaluationResults_TestCase* Arena::CreateMaybeMessage< ::ci::EvaluationResults_TestCase >(Arena* arena) {
  return Arena::CreateInternal< ::ci::EvaluationResults_TestCase >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ci::EvaluationResults* Arena::CreateMaybeMessage< ::ci::EvaluationResults >(Arena* arena) {
  return Arena::CreateInternal< ::ci::EvaluationResults >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
